name: CI Checks
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - hello-api/**
      - .github/workflows/**
jobs:
  format-check:
    name: Check formatting
    runs-on: ubuntu-latest
    env:
      working-directory: ./hello-api
    steps:
      - name: Setup Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run format Check
        run: make check-format
        working-directory: ${{ env.working-directory  }}
      - name: Vet
        run: go vet ./...
        working-directory: ${{ env.working-directory }}

  test:
    name: Test Application
    needs: format-check
    runs-on: ubuntu-latest
    env:
      working-directory: ./hello-api
    steps:
      - name: Setup Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Tests
        run: make test
        working-directory: ${{env.working-directory}}
      - name: Coverage Check
        run: make coverage
        working-directory: ${{env.working-directory}}
      - name: Generate Report
        run: make report
        working-directory: ${{env.working-directory}}
      - name: Copy Files
        run: |
          mkdir reports
          cp cover.html reports/.
        working-directory: ${{env.working-directory}}
      - name: Archive
        uses: actions/upload-artifact@v3
        with:
          name: reports
          path: ${{env.working-directory}}/reports

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: test
    env:
      working-directory: ./hello-api

    steps:
      - name: Setup Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Checkout code into the Go module directory
        uses: actions/checkout@v3

      - name: Build
        run: make build
        working-directory: ${{env.working-directory}}

      - name: Copy Files
        run: |
          mkdir artifacts
          cp api artifacts/.
        working-directory: ${{env.working-directory}}

      - name: Archive
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: ${{env.working-directory}}/artifacts

  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: api
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            In process test
          draft: true
          prerelease: true
      - name: Upload Release binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: api
          asset_name: api
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_content_type: application/octet-stream
  deploy-function:
    name: Deployo FaaS
    runs-on: ubuntu-latest
    needs: test
    env:
      working-directory: ./hello-api
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Auth for deploy
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Deploy function
        id: deploy
        uses: google-github-actions/deploy-cloud-functions@main
        with:
          name: translate
          entry_point: Translate
          runtime: go119
          source_dir: ${{env.working-directory}}
      - name: test
        run: curl "${{ steps.deploy.outputs.url }}/hello"
  containerize-buildpack:
    name: Build Container Buildpack
    runs-on: ubuntu-latest
    env:
      working-directory: ./hello-api
    needs: test
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Install Pack
        run: (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.28.0/pack-v0.28.0-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
      - name: Build
        run: pack build gcr.io/${{ secrets.GCP_PROJECT_ID }}/hello-api:latest --builder gcr.io/buildpacks/builder:v1
        working-directory: ${{env.working-directory}}
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.gcp_credentials }}
          export_default_credentials: true
      - name: Configure Docker
        run: gcloud auth configure-docker --quiet
      - name: Push Docker image to GCP
        run: docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/hello-api:latest
      - name: Login to the GHCR
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag for github
        run: docker image tag gcr.io/${{  secrets.GCP_PROJECT_ID }}/hello-api:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Push Docker Image to GHCR
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  # deploy-pass:
  #   name: Deploy PAAS
  #   runs-on: ubuntu-latest
  #   needs: test
  #   env:
  #     working-directory: ./hello-api
  #   if: ${{ github.event_name=='push' && github.ref == 'refs/head/main'}}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Auth for deploy
  #       id: auth
  #       uses: google-github-actions/auth@v1
  #       with:
  #         credentials_json: ${{ secrets.GCP_CREDENTIALS }}
  #     - name: Deploy App
  #       id: deploy
  #       uses: google-github-actions/deploy-appengine@v1
  #       with:
  #         working_directory: ${{env.working-directory}}
  #     - name: test
  #       id: test
  #       run: curl "${{ steps.deploy.outputs.url }}/translate/hello"
